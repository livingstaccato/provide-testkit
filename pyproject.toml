#
# pyproject.toml
#

[project]
name = "provide-testkit"
description = "Testing utilities and fixtures for the provide ecosystem."
dynamic = ["version"]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Tim Perkins", email = "code@tim.life" },
]
maintainers = [
    { name = "provide.io", email = "code@provide.io" },
]
keywords = ["testing", "fixtures", "mocking", "pytest", "provide"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Mocking",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "provide-foundation>=0.1.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.15.0",
    "click>=8.1.7",  # For CLI testing utilities
]

[project.urls]
Homepage = "https://github.com/provide-io/provide-testkit"
Repository = "https://github.com/provide-io/provide-testkit"
Issues = "https://github.com/provide-io/provide-testkit/issues"

[project.optional-dependencies]
transport = [
    "httpx>=0.27.0",
    "pytest-httpx>=0.35.0",
]
crypto = [
    "cryptography>=45.0.7",
]
process = [
    "psutil>=7.0.0",
]
all = [
    "provide-testkit[transport,crypto,process]",
]

[dependency-groups]
dev = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "twine>=6.1.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
dev-dependencies = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "twine>=6.1.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
]

[tool.uv.sources]
provide-foundation = { workspace = true }

[tool.uv.workspace]
members = ["../provide-foundation"]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -s --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]